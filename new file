import requests
import sqlite3
import time
from db_setup import setup_database

# ---------------------------------------------
# Genius API Setup (Use your own access token)
# ---------------------------------------------
ACCESS_TOKEN = 'jnucUJZcF2kUdD3871ul6Rgtpzd6H0CGbfhnULICOeHxJ4Nn1FCwq-9vhp3OCCqT'
HEADERS = {'Authorization': f'Bearer {ACCESS_TOKEN}'}
BASE_URL = 'https://api.genius.com'

ARTISTS = [
    'Beyonce', 'Caamp', 'Drake', 'Ariana Grande', 'The Weeknd',
    'Rihanna', 'Selena Gomez', 'Queen', 'The Neighbourhood',
    'Lorde', 'Macklemore', 'Journey', 'AC/DC', 'Steve Lacy', 'Brent Faiyaz'
]

DB_NAME = '/Users/skylaremerson/Desktop/SI206/skyhand/music_data.sqlite'
LIMIT_PER_RUN = 25
DESIRED_TOTAL = 125

def setup_database_genius():
    """
    Ensure that the database and Lyrics table are set up.
    """
    setup_database()  # This should include Lyrics table creation

def search_genius_songs(artist, per_page=5, page=1):
    """
    Search Genius API for songs by a given artist.

    Args:
        artist (str): Artist name to search for
        per_page (int): Number of results per API page
        page (int): Which page of results to fetch

    Returns:
        list: A list of hit results
    """
    url = f'{BASE_URL}/search'
    params = {'q': artist, 'per_page': per_page, 'page': page}
    response = requests.get(url, headers=HEADERS, params=params)

    if response.status_code != 200:
        print(f"[Error] Status {response.status_code} when searching {artist}")
        try:
            print(response.json())
        except:
            pass
        return []

    data = response.json()
    return data['response']['hits'][:per_page]

def extract_song_data(hit):
    """
    Extract relevant data from a Genius API song hit.

    Args:
        hit (dict): A song hit from the Genius API

    Returns:
        dict: Song metadata
    """
    song = hit['result']
    return {
        'song_id': song['id'],
        'title': song['title'],
        'artist': song['primary_artist']['name'],
        'album': song.get('album', {}).get('name', 'Unknown'),
        'release_date': song.get('release_date', 'Unknown'),
        'annotation_count': song.get('annotation_count', 0),
        'has_annotations': 1 if song.get('annotation_count', 0) > 0 else 0,
        'lyrics': ''  # Genius API does not return lyrics in search results
    }

def store_lyrics_metadata(song_data):
    """
    Store one song's metadata in the database.

    Args:
        song_data (dict): Metadata to store
    """
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    cur.execute('''
        INSERT OR IGNORE INTO Lyrics (
            song_id, title, artist, album, release_date,
            annotation_count, has_annotations, lyrics
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        song_data['song_id'],
        song_data['title'],
        song_data['artist'],
        song_data['album'],
        song_data['release_date'],
        song_data['annotation_count'],
        song_data['has_annotations'],
        song_data['lyrics']
    ))

    print(f"Inserted: {song_data['title']} by {song_data['artist']}")
    conn.commit()
    conn.close()

def run_genius_collection():
    """
    Main function to collect song metadata from Genius API and store in SQLite.
    Stops at DESIRED_TOTAL or LIMIT_PER_RUN per run.
    """
    setup_database_genius()

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    # Get current song count
    cur.execute("SELECT COUNT(*) FROM Lyrics")
    current_total = cur.fetchone()[0]
    conn.close()

    if current_total >= DESIRED_TOTAL:
        print(f"Already have {current_total} songs. No need to add more.")
        return

    songs_added = 0
    to_add = min(LIMIT_PER_RUN, DESIRED_TOTAL - current_total)

    for artist in ARTISTS:
        if to_add <= 0:
            break
        page = 1
        while to_add > 0:
            hits = search_genius_songs(artist, per_page=5, page=page)
            if not hits:
                break
            for hit in hits:
                song_data = extract_song_data(hit)

                # Avoid duplicate entries
                conn = sqlite3.connect(DB_NAME)
                cur = conn.cursor()
                cur.execute("SELECT 1 FROM Lyrics WHERE song_id = ?", (song_data['song_id'],))
                exists = cur.fetchone()
                conn.close()

                if not exists:
                    store_lyrics_metadata(song_data)
                    songs_added += 1
                    to_add -= 1
                    current_total += 1
                    if current_total >= DESIRED_TOTAL:
                        print(f" Reached goal: {current_total} total songs.")
                        return
                time.sleep(0.5)  # Avoid rate limiting
            page += 1

    print(f"ðŸŽµ Done. Added {songs_added} new songs. Total: {current_total}.")

if __name__ == '__main__':
    run_genius_collection()
